import telegram as tg
import telegram.ext as tge
import random as rn

TOKEN = '7008079892:AAHC2kvgShjLBho9WwY6drc0e98Gh6l8oF0'

async def start(update: tg.Update, context: tge.CallbackContext) -> None:
    reply_markup = tg.InlineKeyboardMarkup(
        [[tg.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='continue')]],
    )
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç, –µ—Å–ª–∏ —Ç—ã —Å—Ç–∞–ª –∂–µ—Ä—Ç–≤–æ–π –∫–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥–∞, —Ç—ã –ø–æ–ø–∞–ª –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ. '
                                    '–ñ–º–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ üëáüèª',reply_markup=reply_markup)

async def give_description(update: tg.Update, context: tge.CallbackContext) -> None:
    description = ('<b>–ö–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥</b> ‚Äî –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –∞–≥—Ä–µ—Å—Å–∏—é, –∑–∞–ø—É–≥–∏–≤–∞–Ω–∏–µ; '
                   '—Ö—É–ª–∏–≥–∞–Ω—Å—Ç–≤–æ; —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –±–æ–π–∫–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–µ—Ä–≤–∏—Å–æ–≤.')
    reply_markup = tg.InlineKeyboardMarkup([[tg.InlineKeyboardButton('–ö–∞–∫ –º–Ω–µ –±–æ—Ä–æ—Ç—å—Å—è —Å –∫–∏–±–µ—Ä–±—É–ª–∏–Ω–≥–æ–º?',
                                                                     callback_data='help')]])
    photo_url = 'https://static.tildacdn.com/tild6564-6566-4162-a365-383063633036/Frame_5-2.jpg'
    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo_url, caption=description,
                                 parse_mode='HTML', reply_markup=reply_markup)

async def give_advices(update: tg.Update, context: tge.CallbackContext) -> None:
    gratitude_list = [
        "–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –ø–æ–º–æ—â—å.",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–º–æ—â—å!",
        "–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        "–ë–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –∑–∞ –ø–æ–º–æ—â—å.",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ.",
        "–û–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥.",
        "–ë–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –∑–∞ –≤–∞—à—É –ø–æ–º–æ—â—å.",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ.",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞–±–æ—Ç—É.",
        "–ë–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è –∏ —É—Å–∏–ª–∏—è."
    ]

    advices = ('<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –±–æ—Ä—å–±–µ —Å –∫–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥–æ–º:</b>\n\n'
                '<b>1.</b> –ù–µ –±—Ä–æ—Å–∞–π—Å—è –≤ –±–æ–π. –õ—É—á—à–∏–π —Å–ø–æ—Å–æ–±: –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å–µ–±—è –≤–µ—Å—Ç–∏ –∏, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–≥–æ, '
                '–∫ –∫–æ–º—É –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è, —Ç–æ –≤–Ω–∞—á–∞–ª–µ —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è. –ï—Å–ª–∏ —Ç—ã –Ω–∞—á–Ω–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è–º–∏ –Ω–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, '
                '—Ç–æ —Ç–æ–ª—å–∫–æ –µ—â–µ –±–æ–ª—å—à–µ —Ä–∞–∑–æ–∂–∂–µ—à—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç.\n\n' 
                '<b>2.</b> –£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–µ–π –∫–∏–±–µ—Ä—Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π.\n\n'
                '<b>3.</b> –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≤ —Å–µ—Ç–∏ –º–Ω–∏–º–∞—è. –°—É—â–µ—Å—Ç–≤—É—é—Ç —Å–ø–æ—Å–æ–±—ã –≤—ã—è—Å–Ω–∏—Ç—å, –∫—Ç–æ —Å—Ç–æ–∏—Ç –∑–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.\n\n'
                '<b>4.</b> –ù–µ —Å—Ç–æ–∏—Ç –≤–µ—Å—Ç–∏ —Ö—É–ª–∏–≥–∞–Ω—Å–∫–∏–π –æ–±—Ä–∞–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏ '
                '—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö. –£–¥–∞–ª–∏—Ç—å –∏—Ö –±—É–¥–µ—Ç –∫—Ä–∞–π–Ω–µ –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç–µ–ª—å–Ω–æ.\n\n'
                '<b>5.</b> –°–æ–±–ª—é–¥–∞–π —Å–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —á–µ—Å—Ç—å —Å–º–æ–ª–æ–¥—É.\n\n'
                '<b>6.</b> –ò–≥–Ω–æ—Ä–∏—Ä—É–π –µ–¥–∏–Ω–∏—á–Ω—ã–π –Ω–µ–≥–∞—Ç–∏–≤. –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ª—É—á—à–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å. '
                '–û–±—ã—á–Ω–æ –∞–≥—Ä–µ—Å—Å–∏—è –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏.\n\n'
                '<b>7.</b> –ë–∞–Ω –∞–≥—Ä–µ—Å—Å–æ—Ä–∞. –í –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –æ–±–º–µ–Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö '
                '–µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.\n\n'
                '<b>8.</b> –ï—Å–ª–∏ —Ç—ã —Å–≤–∏–¥–µ—Ç–µ–ª—å –∫–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥–∞. –¢–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è: –≤—ã—Å—Ç—É–ø–∏—Ç—å –ø—Ä–æ—Ç–∏–≤ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑–∞—Ç—å –µ–º—É, —á—Ç–æ –µ–≥–æ '
               '–¥–µ–π—Å—Ç–≤–∏—è –æ—Ü–µ–Ω–∏–≤–∞—é—Ç—Å—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∂–µ—Ä—Ç–≤—É, –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å, —Å–æ–æ–±—â–∏—Ç—å –≤–∑—Ä–æ—Å–ª—ã–º –æ —Ñ–∞–∫—Ç–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —Å–µ—Ç–∏.')
    reply_markup = tg.ReplyKeyboardMarkup([[gratitude_list[rn.randint(0, 10)]]], one_time_keyboard=True,
                                          resize_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=advices, reply_markup=reply_markup,
                                   parse_mode='HTML')

async def send_greet(update: tg.Update, context: tge.CallbackContext) -> None:
    photo_path = 'workProjects/photo_2024-05-30_01-22-54.jpg'
    reply_markup = tg.ReplyKeyboardMarkup([['–î–æ —Å–≤–∏–¥–∞–Ω–∏—èüëãüèª']], one_time_keyboard=True,
                                          resize_keyboard=True)
    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo_path,
                                 caption='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Å—è, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏—Ç—Å—è. '
                                        '–ë—É–¥–µ–º —Ä–∞–¥ –ø–æ–º–æ—á—å —Ç–µ–±–µ –µ—â–µ —Ä–∞–∑. –ü–æ–∫–∞! üëãüèª')
    await context.bot.send_message(chat_id=update.effective_chat.id, text='–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: '
                                                                          '@karebaviktoriia @aleenkiy',
                                   reply_markup=reply_markup)

async def bye(update: tg.Update, context: tge.CallbackContext) -> None:
    reply_markup = tg.InlineKeyboardMarkup([[tg.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–≤–µ—Ç–∞–º',
                                                                     callback_data='help')]])
    variations = [
        '–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏—Ç—Å—è, –æ–±—Ä–∞—â–∞–π—Å—è. –ë—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –µ—â–µ —Ä–∞–∑. –ü–æ–∫–∞! üëãüèª',
        '–•–æ—Ä–æ—à–µ–≥–æ –í–∞–º –¥–Ω—è! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å.',
        '–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞–º –ø–æ–º–æ–≥–ª–∏ –Ω–∞—à–∏ —Å–æ–≤–µ—Ç—ã.',
        '–ü–æ–∫–∞-–ø–æ–∫–∞!',
        '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!'
    ]
    await update.message.reply_text(variations[rn.randint(0, 4)], reply_markup=reply_markup)

regex_condition = ('(–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–º–æ—â—å!)|(–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É.)|(–ë–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –∑–∞ –ø–æ–º–æ—â—å.)|(–°–ø–∞—Å–∏–±–æ –∑–∞ '
                   '–≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ.)|(–û–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É.)|(–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥.)|(–ë–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –∑–∞ –≤–∞—à—É '
                   '–ø–æ–º–æ—â—å.)|(–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ.)|(–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞–±–æ—Ç—É.)|(–ë–ª–∞–≥–æ–¥–∞—Ä—é '
                   '–≤–∞—Å –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è –∏ —É—Å–∏–ª–∏—è.)')

def main() -> None:

    application = tge.Application.builder().token(TOKEN).build()

    application.add_handler(tge.CommandHandler("start", start))
    application.add_handler(tge.CallbackQueryHandler(give_description, pattern='continue'))
    application.add_handler(tge.CallbackQueryHandler(give_advices, pattern='help'))
    application.add_handler(tge.MessageHandler(tge.filters.Regex(regex_condition), send_greet))
    application.add_handler(tge.MessageHandler(tge.filters.Regex('–î–æ —Å–≤–∏–¥–∞–Ω–∏—èüëãüèª'), bye))

    application.run_polling(allowed_updates=tg.Update.ALL_TYPES)

if __name__ == '__main__':
    main()
